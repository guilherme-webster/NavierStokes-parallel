{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "6bfc04cb",
      "metadata": {
        "id": "6bfc04cb"
      },
      "source": [
        "# Load enviroment and check for folder"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cd .."
      ],
      "metadata": {
        "id": "OU9YW8dnGG0F",
        "outputId": "96b3e8b5-1f92-4abf-a6e2-75a81c29c0df",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "OU9YW8dnGG0F",
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "id": "c014ab06",
      "metadata": {
        "vscode": {
          "languageId": "plaintext"
        },
        "id": "c014ab06",
        "outputId": "d98f8bc5-28dd-448f-b64f-1e4e4b4fbb32",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'NavierStokes-parallel'...\n",
            "remote: Enumerating objects: 1424, done.\u001b[K\n",
            "remote: Counting objects: 100% (156/156), done.\u001b[K\n",
            "remote: Compressing objects: 100% (95/95), done.\u001b[K\n",
            "remote: Total 1424 (delta 105), reused 96 (delta 61), pack-reused 1268 (from 1)\u001b[K\n",
            "Receiving objects: 100% (1424/1424), 277.55 MiB | 29.49 MiB/s, done.\n",
            "Resolving deltas: 100% (836/836), done.\n"
          ]
        }
      ],
      "source": [
        "!rm -rf NavierStokes-parallel\n",
        "!git clone --branch parallel-mauricio https://github.com/guilherme-webster/NavierStokes-parallel.git"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "id": "66c19210",
      "metadata": {
        "vscode": {
          "languageId": "plaintext"
        },
        "id": "66c19210",
        "outputId": "da6c4405-095d-4d74-b610-43dbd11c8eeb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/NavierStokes-parallel\n"
          ]
        }
      ],
      "source": [
        "import subprocess\n",
        "import os\n",
        "import numpy as np\n",
        "%cd NavierStokes-parallel\n",
        "base_dir = os.getcwd()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "44a15399",
      "metadata": {
        "id": "44a15399"
      },
      "source": [
        "# Aux functions declarations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "id": "22e1f3c0",
      "metadata": {
        "vscode": {
          "languageId": "plaintext"
        },
        "id": "22e1f3c0"
      },
      "outputs": [],
      "source": [
        "# Helper functions to compare CFD simulation outputs\n",
        "def extract_center_values(filename):\n",
        "    \"\"\"Extract the center U, V, and P values from the output file\"\"\"\n",
        "    values = {\"u_center\": [], \"v_center\": [], \"p_center\": []}\n",
        "\n",
        "    try:\n",
        "        with open(filename, 'r') as f:\n",
        "            lines = f.readlines()\n",
        "\n",
        "        for i, line in enumerate(lines):\n",
        "            if \"U-CENTER:\" in line:\n",
        "                try:\n",
        "                    value = float(line.split(\":\")[-1].strip())\n",
        "                    if not np.isnan(value) and not np.isinf(value):\n",
        "                        values[\"u_center\"].append(value)\n",
        "                except ValueError:\n",
        "                    continue\n",
        "\n",
        "            elif \"V-CENTER:\" in line:\n",
        "                try:\n",
        "                    value = float(line.split(\":\")[-1].strip())\n",
        "                    if not np.isnan(value) and not np.isinf(value):\n",
        "                        values[\"v_center\"].append(value)\n",
        "                except ValueError:\n",
        "                    continue\n",
        "\n",
        "            elif \"P-CENTER:\" in line:\n",
        "                try:\n",
        "                    value = float(line.split(\":\")[-1].strip())\n",
        "                    if not np.isnan(value) and not np.isinf(value):\n",
        "                        values[\"p_center\"].append(value)\n",
        "                except ValueError:\n",
        "                    continue\n",
        "    except Exception as e:\n",
        "        print(f\"Error extracting values from {filename}: {e}\")\n",
        "\n",
        "    return values\n",
        "\n",
        "def compare_cfd_outputs(serial_file, parallel_file, relative_tolerance=0.05):\n",
        "    \"\"\"Compare CFD outputs with relative tolerance for numerical differences\"\"\"\n",
        "    serial_values = extract_center_values(serial_file)\n",
        "    parallel_values = extract_center_values(parallel_file)\n",
        "\n",
        "    # Make sure we have values to compare\n",
        "    if not all(serial_values.values()) or not all(parallel_values.values()):\n",
        "        return False, \"Missing values in output files\"\n",
        "\n",
        "    # Compare final state (last 10% of timesteps)\n",
        "    errors = []\n",
        "\n",
        "    for key in [\"u_center\", \"v_center\", \"p_center\"]:\n",
        "        # Get last 10% of values or at least the last value\n",
        "        serial_final = serial_values[key][-max(1, len(serial_values[key])//10):]\n",
        "        parallel_final = parallel_values[key][-max(1, len(parallel_values[key])//10):]\n",
        "\n",
        "        # If different number of timesteps, just compare the last value\n",
        "        if len(serial_final) != len(parallel_final):\n",
        "            serial_final = [serial_final[-1]]\n",
        "            parallel_final = [parallel_final[-1]]\n",
        "\n",
        "        for s_val, p_val in zip(serial_final, parallel_final):\n",
        "            # Avoid division by zero with small denominator\n",
        "            denominator = max(abs(s_val), 1e-6)\n",
        "            rel_error = abs(s_val - p_val) / denominator\n",
        "            errors.append(rel_error)\n",
        "\n",
        "    max_error = max(errors) if errors else float('inf')\n",
        "    avg_error = sum(errors)/len(errors) if errors else float('inf')\n",
        "\n",
        "    if max_error <= relative_tolerance:\n",
        "        return True, f\"Outputs match within tolerance. Avg error: {avg_error:.6f}, Max error: {max_error:.6f}\"\n",
        "    else:\n",
        "        return False, f\"Outputs differ beyond tolerance. Avg error: {avg_error:.6f}, Max error: {max_error:.6f}\""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!compute-sanitizer --tool memcheck build/parallel"
      ],
      "metadata": {
        "id": "IAnRC2aCOc14",
        "outputId": "bcb5955b-6347-45a4-8c5b-725332c99e06",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "IAnRC2aCOc14",
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "========= COMPUTE-SANITIZER\n",
            "Starting Navier-Stokes CUDA parallel solver\n",
            "Loading parameters from: parameters.txt\n",
            "Parameters loaded: i_max=257, j_max=257, Re=10000.0\n",
            "Initialized!\n",
            "Memory allocated. Dimensions: i_max=257, j_max=257\n",
            "INFO: Initializing CUDA arrays with dimensions i_max=257, j_max=257\n",
            "INFO: Allocating 536648 bytes for each array\n",
            "INFO: GPU Memory - Free: 15670050816 bytes, Total: 15828320256 bytes\n",
            "INFO: Copying data from host arrays to unified memory\n",
            "INFO: Prefetching data to device 0\n",
            "INFO: CUDA arrays initialization complete\n",
            "CUDA arrays initialized.\n",
            "0.00000 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.000000, v_max=0.000000\n",
            "INFO: delta_t=0.037851, gamma_factor=0.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 0 TIME: 0.000000\n",
            "U-CENTER: -0.000005\n",
            "V-CENTER: 0.000000\n",
            "P-CENTER: -0.000001\n",
            "0.03785 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.499795, v_max=0.249602\n",
            "INFO: delta_t=0.007785, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 1 TIME: 0.037851\n",
            "U-CENTER: -0.000138\n",
            "V-CENTER: 0.000005\n",
            "P-CENTER: -0.000067\n",
            "0.04564 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.524500, v_max=0.211832\n",
            "INFO: delta_t=0.007419, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 2 TIME: 0.045636\n",
            "U-CENTER: -0.000622\n",
            "V-CENTER: 0.000015\n",
            "P-CENTER: -0.000266\n",
            "0.05305 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.544874, v_max=0.183369\n",
            "INFO: delta_t=0.007141, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 3 TIME: 0.053055\n",
            "U-CENTER: -0.001379\n",
            "V-CENTER: 0.000025\n",
            "P-CENTER: -0.000441\n",
            "0.06020 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.562610, v_max=0.359629\n",
            "INFO: delta_t=0.006916, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 4 TIME: 0.060196\n",
            "U-CENTER: -0.002179\n",
            "V-CENTER: 0.000032\n",
            "P-CENTER: -0.000479\n",
            "0.06711 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.578567, v_max=0.158699\n",
            "INFO: delta_t=0.006725, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 5 TIME: 0.067112\n",
            "U-CENTER: -0.002837\n",
            "V-CENTER: 0.000035\n",
            "P-CENTER: -0.000401\n",
            "0.07384 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.593203, v_max=0.108411\n",
            "INFO: delta_t=0.006559, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 6 TIME: 0.073837\n",
            "U-CENTER: -0.003270\n",
            "V-CENTER: 0.000035\n",
            "P-CENTER: -0.000269\n",
            "0.08040 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.606725, v_max=0.182312\n",
            "INFO: delta_t=0.006413, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 7 TIME: 0.080397\n",
            "U-CENTER: -0.003467\n",
            "V-CENTER: 0.000034\n",
            "P-CENTER: -0.000132\n",
            "0.08681 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.619207, v_max=0.193585\n",
            "INFO: delta_t=0.006284, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 8 TIME: 0.086810\n",
            "U-CENTER: -0.003468\n",
            "V-CENTER: 0.000033\n",
            "P-CENTER: -0.000017\n",
            "0.09309 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.630721, v_max=0.205955\n",
            "INFO: delta_t=0.006169, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 9 TIME: 0.093094\n",
            "U-CENTER: -0.003334\n",
            "V-CENTER: 0.000034\n",
            "P-CENTER: 0.000065\n",
            "0.09926 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.641299, v_max=0.220252\n",
            "INFO: delta_t=0.006067, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 10 TIME: 0.099263\n",
            "U-CENTER: -0.003133\n",
            "V-CENTER: 0.000036\n",
            "P-CENTER: 0.000106\n",
            "0.10533 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.650987, v_max=0.574671\n",
            "INFO: delta_t=0.005977, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 11 TIME: 0.105330\n",
            "U-CENTER: -0.002931\n",
            "V-CENTER: 0.000039\n",
            "P-CENTER: 0.000108\n",
            "0.11131 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.659826, v_max=0.092260\n",
            "INFO: delta_t=0.005897, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 12 TIME: 0.111307\n",
            "U-CENTER: -0.002781\n",
            "V-CENTER: 0.000042\n",
            "P-CENTER: 0.000077\n",
            "0.11720 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.667981, v_max=0.590335\n",
            "INFO: delta_t=0.005825, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 13 TIME: 0.117205\n",
            "U-CENTER: -0.002713\n",
            "V-CENTER: 0.000045\n",
            "P-CENTER: 0.000022\n",
            "0.12303 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.675444, v_max=0.308478\n",
            "INFO: delta_t=0.005761, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 14 TIME: 0.123030\n",
            "U-CENTER: -0.002740\n",
            "V-CENTER: 0.000048\n",
            "P-CENTER: -0.000041\n",
            "0.12879 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.682361, v_max=0.090815\n",
            "INFO: delta_t=0.005702, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 15 TIME: 0.128790\n",
            "U-CENTER: -0.002853\n",
            "V-CENTER: 0.000051\n",
            "P-CENTER: -0.000101\n",
            "0.13449 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.688775, v_max=0.589632\n",
            "INFO: delta_t=0.005649, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 16 TIME: 0.134493\n",
            "U-CENTER: -0.003027\n",
            "V-CENTER: 0.000053\n",
            "P-CENTER: -0.000145\n",
            "0.14014 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.694757, v_max=0.587076\n",
            "INFO: delta_t=0.005601, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 17 TIME: 0.140142\n",
            "U-CENTER: -0.003232\n",
            "V-CENTER: 0.000055\n",
            "P-CENTER: -0.000168\n",
            "0.14574 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.700373, v_max=0.590022\n",
            "INFO: delta_t=0.005556, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "SOR complete!\n",
            "INFO: Atualizando velocidades com kernel update_uv_kernel\n",
            "INFO: Acessando valores centrais em i=128, j=128\n",
            "TIMESTEP: 18 TIME: 0.145743\n",
            "U-CENTER: -0.003437\n",
            "V-CENTER: 0.000057\n",
            "P-CENTER: -0.000170\n",
            "0.15130 / 1.00000\n",
            "---------------------\n",
            "INFO: Calculando norma inicial de pressão\n",
            "INFO: Alocando memória para valores máximos\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_u\n",
            "INFO: Executando kernel max_mat_kernel_double para unified_v\n",
            "INFO: Valores máximos: u_max=0.707885, v_max=0.599357\n",
            "INFO: delta_t=0.005497, gamma_factor=1.000000\n",
            "Conditions set!\n",
            "F, G calculated!\n",
            "RHS calculated!\n",
            "^C\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9278ac1f",
      "metadata": {
        "id": "9278ac1f"
      },
      "source": [
        "# Running and comparing with serial"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "id": "f826e8c4",
      "metadata": {
        "vscode": {
          "languageId": "plaintext"
        },
        "id": "f826e8c4",
        "outputId": "2eaa124b-2511-4af4-c3f9-5e95337e0086",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 832
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cmake output:\n",
            "\n",
            "Cmake output:\n",
            "-- Configuring done (0.0s)\n",
            "-- Generating done (0.0s)\n",
            "-- Build files have been written to: /content/NavierStokes-parallel/build\n",
            "\n",
            "Compilation output:\n",
            "[ 54%] Built target serial\n",
            "[100%] Built target parallel\n",
            "\n",
            "Test 1: [CORRECT OUTPUT]\n",
            "  Serial time = 123.026222s\n",
            "  Parallel time = 0.000000s\n",
            "  Speedup = infx\n",
            "  Outputs match within tolerance. Avg error: 0.000000, Max error: 0.000000\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-57-2ef0808b5d23>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0;31m# Run parallel and serial programs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m     \u001b[0msubprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"build/parallel {test_input} > build/{parallel_output} 2> build/{parallel_time}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshell\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcwd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexercise_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m     \u001b[0msubprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"build/serial {test_input} > build/{serial_output} 2> build/{serial_time}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshell\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcwd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexercise_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(input, capture_output, timeout, check, *popenargs, **kwargs)\u001b[0m\n\u001b[1;32m    548\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mPopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mpopenargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mprocess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m             \u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTimeoutExpired\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m             \u001b[0mprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkill\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36mcommunicate\u001b[0;34m(self, input, timeout)\u001b[0m\n\u001b[1;32m   1199\u001b[0m                 \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1200\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1201\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1202\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1203\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1262\u001b[0m             \u001b[0mendtime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_time\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1263\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1264\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1265\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1266\u001b[0m             \u001b[0;31m# https://bugs.python.org/issue25942\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36m_wait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   2051\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturncode\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2052\u001b[0m                             \u001b[0;32mbreak\u001b[0m  \u001b[0;31m# Another thread waited.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2053\u001b[0;31m                         \u001b[0;34m(\u001b[0m\u001b[0mpid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msts\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2054\u001b[0m                         \u001b[0;31m# Check the pid and loop as waitpid has been known to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2055\u001b[0m                         \u001b[0;31m# return 0 even without WNOHANG in odd situations.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36m_try_wait\u001b[0;34m(self, wait_flags)\u001b[0m\n\u001b[1;32m   2009\u001b[0m             \u001b[0;34m\"\"\"All callers to this function MUST hold self._waitpid_lock.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2010\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2011\u001b[0;31m                 \u001b[0;34m(\u001b[0m\u001b[0mpid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msts\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwaitpid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwait_flags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2012\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mChildProcessError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2013\u001b[0m                 \u001b[0;31m# This happens if SIGCLD is set to be ignored or waiting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "# set exercise path\n",
        "exercise_dir = base_dir\n",
        "\n",
        "# Function to run shell commands in a specific directory\n",
        "def run_command(command, work_dir):\n",
        "    return subprocess.run(command, shell=True, cwd=work_dir, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
        "\n",
        "# Create and prepare the build directory\n",
        "cmd_return = run_command('cmake -E remove -f build', exercise_dir)\n",
        "print(f\"Cmake output:\\n{cmd_return.stdout}\")\n",
        "\n",
        "if cmd_return.returncode != 0:\n",
        "    print(f\"Cmake failed with error:\\n{cmd_return.stderr}\")\n",
        "    assert False\n",
        "\n",
        "run_command('cmake -E make_directory build', exercise_dir)\n",
        "cmd_return = run_command('cmake ../ -DCMAKE_BUILD_TYPE=Release', os.path.join(exercise_dir, 'build'))\n",
        "print(f\"Cmake output:\\n{cmd_return.stdout}\")\n",
        "\n",
        "if cmd_return.returncode != 0:\n",
        "    print(f\"Cmake failed with error:\\n{cmd_return.stderr}\")\n",
        "    assert False\n",
        "\n",
        "# Compile the programs\n",
        "cmd_return = run_command('make', os.path.join(exercise_dir, 'build'))\n",
        "print(f\"Compilation output:\\n{cmd_return.stdout}\")\n",
        "\n",
        "if cmd_return.returncode != 0:\n",
        "    print(f\"Compilation failed with error:\\n{cmd_return.stderr}\")\n",
        "    assert False\n",
        "\n",
        "# Execute tests and collect outputs\n",
        "for i in range(1, 6):\n",
        "    test_input = f\"tests/{i}.in\"\n",
        "\n",
        "    if not os.path.exists(os.path.join(exercise_dir, test_input)):\n",
        "        printf(\"Error! Test input not found\")\n",
        "\n",
        "    parallel_output = f\"parallel.{i}.out\"\n",
        "    serial_output = f\"serial.{i}.out\"\n",
        "    parallel_time = f\"parallel.{i}.time\"\n",
        "    serial_time = f\"serial.{i}.time\"\n",
        "\n",
        "\n",
        "    # Workaround for GDrive permissions\n",
        "    subprocess.run(f\"chmod 755 ./parallel\", shell=True, cwd=os.path.join(exercise_dir, 'build'))\n",
        "    subprocess.run(f\"chmod 755 ./serial\", shell=True, cwd=os.path.join(exercise_dir, 'build'))\n",
        "\n",
        "    # Run parallel and serial programs\n",
        "    subprocess.run(f\"build/parallel {test_input} > build/{parallel_output} 2> build/{parallel_time}\", shell=True, cwd=os.path.join(exercise_dir))\n",
        "    subprocess.run(f\"build/serial {test_input} > build/{serial_output} 2> build/{serial_time}\", shell=True, cwd=os.path.join(exercise_dir))\n",
        "\n",
        "    # Compare outputs and calculate speedup\n",
        "    diff_result = subprocess.run(f\"cmp {serial_output} {parallel_output}\", shell=True, cwd=os.path.join(exercise_dir, 'build'), stderr=subprocess.PIPE)\n",
        "    diff_status = diff_result.returncode\n",
        "\n",
        "    # Read timings\n",
        "    with open(os.path.join(exercise_dir, 'build', serial_time), 'r') as f:\n",
        "        serial_runtime = float(f.read().strip())\n",
        "\n",
        "    try:\n",
        "        with open(os.path.join(exercise_dir, 'build', parallel_time), 'r') as f:\n",
        "            parallel_runtime = float(f.read().strip())\n",
        "    except:\n",
        "        parallel_runtime = 0\n",
        "\n",
        "    # Compare outputs with relaxed tolerance appropriate for CFD\n",
        "    match, message = compare_cfd_outputs(\n",
        "        os.path.join(exercise_dir, 'build', serial_output),\n",
        "        os.path.join(exercise_dir, 'build', parallel_output),\n",
        "        relative_tolerance=0.05  # 5% relative tolerance\n",
        "    )\n",
        "\n",
        "    test_status = \"[CORRECT OUTPUT]\" if match else \"[APPROXIMATE OUTPUT]\" if \"Avg error\" in message and float(message.split(\"Avg error:\")[1].split(\",\")[0]) < 0.2 else \"[INCORRECT OUTPUT]\"\n",
        "\n",
        "    # Calculate and display speedup\n",
        "    if match or \"Avg error\" in message:\n",
        "        speedup = serial_runtime / parallel_runtime if parallel_runtime > 0 else float('inf')\n",
        "        print(f\"Test {i}: {test_status}\")\n",
        "        print(f\"  Serial time = {serial_runtime:.6f}s\")\n",
        "        print(f\"  Parallel time = {parallel_runtime:.6f}s\")\n",
        "        print(f\"  Speedup = {speedup:.4f}x\")\n",
        "        print(f\"  {message}\\n\")\n",
        "    else:\n",
        "        print(f\"Test {i}: {test_status}\")\n",
        "        print(f\"  Serial time = {serial_runtime:.6f}s\")\n",
        "        print(f\"  {message}\\n\")"
      ]
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "accelerator": "GPU",
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}